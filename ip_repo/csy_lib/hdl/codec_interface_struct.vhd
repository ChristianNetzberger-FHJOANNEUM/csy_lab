-- VHDL Entity csy_lib.codec_interface.symbol
--
-- Created:
--          by - net.UNKNOWN (KPERSM7467)
--          at - 14:50:52 11.05.2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.std_logic_arith.ALL;

entity codec_interface is
   generic( 
      core_clk_freq_g : integer := 125000000
   );
   port( 
      audio_out_left  : in     std_logic_vector (23 downto 0);
      audio_out_right : in     std_logic_vector (23 downto 0);
      clk             : in     std_logic;
      line_select     : in     std_logic;
      mic_select      : in     std_logic;
      recdat          : in     std_logic;
      reset           : in     std_logic;
      sda_i           : in     std_logic;
      testmodes       : in     std_logic_vector (3 downto 0);
      audio_in_left   : out    std_logic_vector (23 downto 0);
      audio_in_right  : out    std_logic_vector (23 downto 0);
      bclk            : out    std_logic;
      mclk            : out    std_logic;
      mute            : out    std_logic;
      pbdat           : out    std_logic;
      pblrc           : out    std_logic;
      reclrc          : out    std_logic;
      sample_en_o     : out    std_logic;
      scl             : out    std_logic;
      sda_o           : out    std_logic;
      sda_t           : out    std_logic
   );

-- Declarations

end codec_interface ;

--
-- VHDL Architecture csy_lib.codec_interface.struct
--
-- Created:
--          by - net.UNKNOWN (KPERSM7467)
--          at - 22:14:26 23.10.2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.2 (Build 5)
--
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.std_logic_arith.ALL;
--library work;
--use work.busdef.ALL;
use ieee.std_logic_unsigned.all;

library csy_lib;

architecture struct of codec_interface is

   -- Architecture declarations

   -- Internal signal declarations
   signal audio_in_left_tmp   : std_logic_vector(23 downto 0);
   signal audio_in_right_tmp  : std_logic_vector(23 downto 0);
   signal audio_out_left_tmp  : std_logic_vector(23 downto 0);
   signal audio_out_right_tmp : std_logic_vector(23 downto 0);
   signal cnt                 : std_logic_vector(17 downto 0);
   signal debug               : std_logic_vector(7 downto 0);
   signal fcw                 : std_logic_vector(16 downto 0);
   signal hi                  : std_logic;
   signal i2c_scl             : std_logic;
   signal i2c_sda_i           : std_logic;
   signal i2c_sda_o           : std_logic;
   signal lo                  : std_logic;
   signal mic_boost           : std_logic;
   signal ramp0               : std_logic_vector(16 downto 0);
   signal ramp1               : std_logic_vector(16 downto 0);
   signal reg_ack             : std_logic;
   signal reg_addr            : std_logic_vector(6 downto 0);
   signal reg_addr_in         : std_logic_vector(6 downto 0);
   signal reg_rd              : std_logic;
   signal reg_rdata           : std_logic_vector(8 downto 0);
   signal reg_wdata           : std_logic_vector(8 downto 0);
   signal reg_wdata_in        : std_logic_vector(8 downto 0);
   signal reg_we              : std_logic;
   signal reg_we_in           : std_logic;
   signal sample_en           : std_logic;
   signal trapezoid0          : std_logic_vector(15 downto 0);
   signal trapezoid1          : std_logic_vector(15 downto 0);
   signal triangle0           : std_logic_vector(15 downto 0);
   signal triangle0_tmp       : std_logic_vector(16 downto 0);
   signal triangle1           : std_logic_vector(15 downto 0);
   signal triangle1_tmp       : std_logic_vector(16 downto 0);


   -- Component Declarations
   component i2c_config
   port (
      clk          : in     std_logic ;
      reg_ack      : in     std_logic ;
      reg_addr_in  : in     std_logic_vector (6 downto 0);
      reg_rdata    : in     std_logic_vector (8 downto 0);
      reg_wdata_in : in     std_logic_vector (8 downto 0);
      reg_we_in    : in     std_logic ;
      reset        : in     std_logic ;
      trig         : in     std_logic ;
      cstate       : out    std_logic_vector (3 downto 0);
      reg_addr     : out    std_logic_vector (6 downto 0);
      reg_rd       : out    std_logic ;
      reg_wdata    : out    std_logic_vector (8 downto 0);
      reg_we       : out    std_logic 
   );
   end component;
   component i2c_master
   generic (
      i2c_slv_addr_g   : std_logic_vector := "0011010";
      i2c_baudrate_g   : integer          := 100000;
      core_clk_frequ_g : integer          := 100000000
   );
   port (
      clk       : in     std_logic ;
      i2c_sda_i : in     std_logic ;
      reg_addr  : in     std_logic_vector (6 downto 0);
      reg_wdata : in     std_logic_vector (8 downto 0);
      reg_we    : in     std_logic ;
      reset     : in     std_logic ;
      i2c_scl   : out    std_logic ;
      i2c_sda_o : out    std_logic ;
      reg_rd    : in     std_logic ;
      reg_ack   : out    std_logic ;
      reg_rdata : out    std_logic_vector (8 downto 0);
      state     : out    std_logic_vector (3 downto 0)
   );
   end component;
   component i2s_master
   port (
      audio_out_left  : in     std_logic_vector (23 downto 0);
      audio_out_right : in     std_logic_vector (23 downto 0);
      clk             : in     std_logic ;
      recdat          : in     std_logic ;
      reset           : in     std_logic ;
      audio_in_left   : out    std_logic_vector (23 downto 0);
      audio_in_right  : out    std_logic_vector (23 downto 0);
      bclk            : out    std_logic ;
      debug           : out    std_logic_vector (7 downto 0);
      mclk            : out    std_logic ;
      pbdat           : out    std_logic ;
      pblrc           : out    std_logic ;
      reclrc          : out    std_logic ;
      sample_in       : out    std_logic 
   );
   end component;

   -- Optional embedded configurations
   -- pragma synthesis_off
   for all : i2c_config use entity csy_lib.i2c_config;
   for all : i2c_master use entity csy_lib.i2c_master;
   for all : i2s_master use entity csy_lib.i2s_master;
   -- pragma synthesis_on


begin
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 reg4_config
   lo <= '0';
   hi <= '1';
   
   ---set mic_boost inactive for this application
   mic_boost <= '0';
   
   reg_addr_in <= conv_std_logic_vector(4,reg_addr_in'length);
   
   -- update reg4 of audio codec to select between line_in and mic
   process(clk)
   begin
   if rising_edge(clk) then
       reg_we_in <= line_select or mic_select;
       if mic_select = '1' then
           if mic_boost = '1' then
              reg_wdata_in <= "000010101";
           else
              reg_wdata_in <= "000010100";
           end if;
        elsif line_select = '1' then
              reg_wdata_in <= "000010010";
        end if;
   end if;
   end process;
   
                            

   -- HDL Embedded Text Block 2 testsignals
   -- testsignals 2  
   fcw <= conv_std_logic_vector(1000,fcw'length);
   process(clk)
   begin
      if rising_edge(clk) then
          if reset = '1' then
               cnt <= (others => '0');
          elsif sample_en = '1' then
               cnt <= cnt + fcw;
          end if;
       end if;
   end process; 
   ramp0 <= cnt(16 downto 0);
   ramp1 <= cnt(17 downto 1);
   triangle0_tmp <=  ramp0 when ramp0(ramp0'left) = '0' else (not ramp0)+1;
   triangle1_tmp <=  ramp1 when ramp1(ramp1'left) = '0' else (not ramp1)+1;
   
   triangle0 <= triangle0_tmp(triangle0'range);
   triangle1 <= triangle1_tmp(triangle1'range);
   
   trapezoid0 <= X"C000" when triangle0(15 downto 14) = "11" else
                 X"4000" when triangle0(15 downto 14) = "00" else
                 triangle0; 
   trapezoid1 <= X"C000" when triangle1(15 downto 14) = "11" else
                 X"4000" when triangle1(15 downto 14) = "00" else
                 triangle1; 
   
                                      
   
   
   

   -- HDL Embedded Text Block 3 testmodes
   -- audio testmode multiplexer
   -- audio in test signals
   audio_in_right <= audio_in_right_tmp when testmodes(0) = '0' else (triangle0 xor X"8000") & X"00";
   audio_in_left  <= audio_in_left_tmp when testmodes(1) = '0' else (triangle1 xor X"8000") & X"00";
   audio_out_right_tmp <= audio_out_right when testmodes(2) = '0' else (trapezoid0 xor X"8000") & X"00";
   audio_out_left_tmp <= audio_out_left when testmodes(3) = '0' else (trapezoid1 xor X"8000") & X"00";
   
                                        
   

   -- HDL Embedded Text Block 7 i2c_signals
   process(clk)
   begin
      if clk='1' and clk'event then
             sda_t <=   i2c_sda_o;
             sda_o  <= '0';
             scl <= i2c_scl;
             i2c_sda_i <= sda_i;
      end if;
   end process;                                              

   -- HDL Embedded Text Block 10 mute_ctrl
   --mute of audio codec 
   --is permanently de-activated !
   mute <= '1';  --is active low
   
   sample_en_o <= sample_en;
                         


   -- Instance port mappings.
   U_4 : i2c_config
      port map (
         clk          => clk,
         reg_ack      => reg_ack,
         reg_addr_in  => reg_addr_in,
         reg_rdata    => reg_rdata,
         reg_wdata_in => reg_wdata_in,
         reg_we_in    => reg_we_in,
         reset        => reset,
         trig         => lo,
         cstate       => open,
         reg_addr     => reg_addr,
         reg_rd       => reg_rd,
         reg_wdata    => reg_wdata,
         reg_we       => reg_we
      );
   U_3 : i2c_master
      generic map (
         i2c_slv_addr_g   => "0011010",
         i2c_baudrate_g   => 100000,
         core_clk_frequ_g => core_clk_freq_g
      )
      port map (
         clk       => clk,
         i2c_sda_i => i2c_sda_i,
         reg_addr  => reg_addr,
         reg_wdata => reg_wdata,
         reg_we    => reg_we,
         reset     => reset,
         i2c_scl   => i2c_scl,
         i2c_sda_o => i2c_sda_o,
         reg_rd    => reg_rd,
         reg_ack   => reg_ack,
         reg_rdata => reg_rdata,
         state     => open
      );
   U_2 : i2s_master
      port map (
         audio_out_left  => audio_out_left_tmp,
         audio_out_right => audio_out_right_tmp,
         clk             => clk,
         recdat          => recdat,
         reset           => reset,
         audio_in_left   => audio_in_left_tmp,
         audio_in_right  => audio_in_right_tmp,
         bclk            => bclk,
         debug           => debug,
         mclk            => mclk,
         pbdat           => pbdat,
         pblrc           => pblrc,
         reclrc          => reclrc,
         sample_in       => sample_en
      );

end struct;
